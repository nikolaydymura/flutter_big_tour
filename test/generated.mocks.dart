// Mocks generated by Mockito 5.3.2 from annotations
// in untitled/test/generated.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:untitled/repositories/albums_repository.dart' as _i4;
import 'package:untitled/repositories/users_repository.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [UsersRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUsersRepository extends _i1.Mock implements _i2.UsersRepository {
  MockUsersRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: '',
      ) as String);
  @override
  _i3.Future<List<_i2.User>> loadUsers() => (super.noSuchMethod(
        Invocation.method(
          #loadUsers,
          [],
        ),
        returnValue: _i3.Future<List<_i2.User>>.value(<_i2.User>[]),
      ) as _i3.Future<List<_i2.User>>);
}

/// A class which mocks [AlbumsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAlbumsRepository extends _i1.Mock implements _i4.AlbumsRepository {
  MockAlbumsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: '',
      ) as String);
  @override
  _i3.Future<List<_i4.Album>> loadAlbums(int? userId) => (super.noSuchMethod(
        Invocation.method(
          #loadAlbums,
          [userId],
        ),
        returnValue: _i3.Future<List<_i4.Album>>.value(<_i4.Album>[]),
      ) as _i3.Future<List<_i4.Album>>);
}
